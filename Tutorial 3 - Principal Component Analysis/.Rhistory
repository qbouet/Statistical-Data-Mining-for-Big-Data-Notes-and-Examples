knitr::opts_chunk$set(echo = TRUE)
x1 = c(1,1,0,5,6,4)
x2 = c(4,3,4,1,2,0)
plot(x1,x2)
df2 = data.frame(c(1,1,0,5,6,4),
c(4,3,4,1,2,0))
colnames(df2)=c('X', 'Y')
plot(df2$X, df2$Y,
pch=19,
cex=1.3,
ylab="Y", xlab="X",
main="data scatterplot")
set.seed(123)
labs <- sample(c(1,2), size=6, replace=T)
df2$labels <- labs
set.seed(123)
labs <- sample(c(1,2), size=6, replace=T)
df2$labels <- labs
df2$labels
x1 = df2[labs==1,c(1,2)]
xc1 = colSums(x1)/4
x2 = df2[labs==2,c(1,2)]
xc2 = colSums(x2)/2
plot(df2$X,df2$Y, pch=19, cex=1.2,
ylab="Y", xlab="X", col=labs, main="1st iteration")
points(xc1[1], xc1[2], col='black', pch='+', cex=2)
points(xc2[1],xc2[2], col='red', pch='+', cex=2)
plot(df2$X,df2$Y, pch=19, cex=1.2,
ylab="Y", xlab="X", col=labs, main="1st iteration")
points(xc1[1], xc1[2], col='black', pch='+', cex=2)
points(xc2[1],xc2[2], col='red', pch='+', cex=2)
#cluster 1
temp1a = (df2[,1] - xc1[1])
temp1b = (df2[,2] - xc1[2])
d1 = sqrt(temp1aˆ2 + temp1bˆ2)
#cluster 1
temp1a = (df2[,1] - xc1[1])
temp1b = (df2[,2] - xc1[2])
d1 = sqrt(temp1a^2 + temp1b^2)
#cluster2
temp2a = (df2[,1] - xc2[1])
temp2b = (df2[,2] - xc2[2])
d2 = sqrt(temp2a^2 + temp2b^2)
df2$d1 = round(d1,3)
df2$d2 = round(d2,3)
#cluster 1
temp1a = (df2[,1] - xc1[1])
temp1b = (df2[,2] - xc1[2])
d1 = sqrt(temp1a^2 + temp1b^2)
#cluster2
temp2a = (df2[,1] - xc2[1])
temp2b = (df2[,2] - xc2[2])
d2 = sqrt(temp2a^2 + temp2b^2)
df2$d1 = round(d1,3)
df2$d2 = round(d2,3)
res <- kmeans(df2, centers=2,nstart=10) # 2 clusters; 10 random sets
plot(df2$X, df2$Y, pch=19,cex=2, col=res$cluster+1,
ylab="Y", xlab="X",
main="R kmeans()")
points(res$centers, pch="+", cex=2)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
nci.labs <- NCI60$labs
nci.data <- NCI60$data
dim(nci.data)
Cols <- function(vec){
cols <- rainbow(length(unique(vec)))
return(cols[as.numeric(as.factor(vec))])
}
data.dist <- dist(sd.data)
model <- lm(data = USArrests)
TSS = sum()
RSS = sum()
pve = 1 - RSS/TSS
model <- lm(data = USArrests)
summary(model)
TSS = sum()
RSS = sum()
pve = 1 - RSS/TSS
model <- lm(data = USArrests)
summary(model)
#find sse
sse <- sum((fitted(model) - df$score)^2)
model <- lm(data = USArrests)
summary(model)
#find sse
sse <- sum((fitted(model) - USArrests)^2)
sse
#find ssr
ssr <- sum((fitted(model) - mean(df$score))^2)
model <- lm(data = USArrests)
summary(model)
#find sse
sse <- sum((fitted(model) - USArrests)^2)
sse
#find ssr
ssr <- sum((fitted(model) - mean(USArrests)^2)
ssr
model <- lm(data = USArrests)
summary(model)
#find sse
sse <- sum((fitted(model) - USArrests)^2)
sse
#find ssr
ssr <- sum(fitted(model) - mean(USArrests)^2)
ssr
#find sst
sst <- ssr + sse
sst
TSS = sum()
RSS = sum()
pve = 1 - RSS/TSS
#obtain loadings from prcomp() function
loadings <- pr.out$rotation
#load data
#install.packages('ISLR') #note: may need to install.packages in the console!
library(ISLR)
data("USArrests")
# Note: The variance explained by each principal component:
# pr.var = pr.out$sdev^2
pr.out = prcomp(USArrests, scale = TRUE)
pve =100*pr.out$sdev^2 / sum(pr.out$sdev^2)
pve
plot(pve,
type = "o",
ylab = "PVE",
xlab = "Principal Component",
col = "blue")
#obtain loadings from prcomp() function
loadings <- pr.out$rotation
#scale dataset just to make sure data we use is consistent
USArrests2 <- scale(USArrests)
#convert dataset into matrix, square each value in matrix, and sum them up
#to get the denominator of the equation
sumvalue <- sum(as.matrix(USArrests2)^2)
#multiple these two matrix and then sqaure
num <- (as.matrix(USArrests2)%*%loadings)^2
#calculate the column value for num matrix
colvalue<-c()
for (i in 1:length(num[1,])){
colvalue[i]<-sum(num[,i])
}
#calculate new pve
pve1<-colvalue/sumvalue
(pve1)
pve = 1 - RSS/TSS
# Obtain loadings from prcomp() function
# The loadings make up the principal component loading vector
loadings <- pr.out$rotation
# Scale dataset just to make sure the data we use is consistent
USArrests2 <- scale(USArrests)
# Convert dataset into matrix, square each value in matrix, and sum them up
# to get the denominator of the equation
sumvalue <- sum(as.matrix(USArrests2)^2)
# Multiply these two matrices and then square
# Note: "%*%" is matrix multiplication
num <- (loadings%*%as.matrix(USArrests2))^2
load(sparrow2.csv)
load(Sparrow2.csv)
load(Sparrows2.csv)
load(Sparrows2.csv)
skulls <- read.csv("Sparrows2.csv")
Sparrows2 <- read.csv("Sparrows2.csv")
Sparrows2 <- read.csv("Sparrows2.csv")
dim(Sparrows2)
Sparrows2 <- read.csv("Sparrows2.csv")
dim(Sparrows2)
Sparrows$labs
Sparrows2 <- read.csv("Sparrows2.csv")
dim(Sparrows2)
Sparrows2$labs
Sparrows2 <- read.csv("Sparrows2.csv")
dim(Sparrows2)
Sparrows2$wingcrd
Sparrows2 <- read.csv("Sparrows2.csv")
dim(Sparrows2)
table(Sparrows2$flatwing)
Sparrows2 <- read.csv("Sparrows2.csv")
dim(Sparrows2)
variables <- row.names(Sparrows2)
variables
Sparrows2 <- read.csv("Sparrows2.csv")
dim(Sparrows2)
variables <- column.names(Sparrows2)
Sparrows2 <- read.csv("Sparrows2.csv")
dim(Sparrows2)
variables <- names(Sparrows2)
variables
Sparrows2 <- read.csv("Sparrows2.csv")
dim(Sparrows2)
variables <- names(Sparrows2)
variables
apply(USArrests, 2, mean)
Sparrows2 <- read.csv("Sparrows2.csv")
dim(Sparrows2)
variables <- names(Sparrows2)
variables
apply(Sparrows2, 2, mean)
apply(Sparrows2, 2, mean)
apply(USArrests, 2, var)
apply(Sparrows2, 2, var)
pr.out <- prcomp(Sparrows2, scale = TRUE)
names(pr.out)
pr.out$center
pr.out$scale
# This function names it the rotation matrix, because when we matrix-multiply the
# X matrix by pr.out$rotation, it gives us the coordinates of the data in the rotated
# coordinate system. These coordinates are the principal component scores.
pr.out$rotation
dim(pr.out$x)
biplot(pr.out, scale = 0)
biplot(pr.out, scale = 0, cex = 0.5)
biplot(pr.out, scale = 0, cex = 0.7)
biplot(pr.out,
scale = 0,
cex = 0.7,
xlabel="First Principle Component (PC1)",
ylabel="Second Principle Component (PC2)")
biplot(pr.out,
scale = 0,
cex = 0.7,
xlab="First Principle Component (PC1)",
ylab="Second Principle Component (PC2)")
par(mfrow = c(1, 2))
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1),
type = "b")
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1),
type = "b")
pr.var <- pr.out$sdevˆ2
pve <- pr.var / sum(pr.var)
pve
par(mfrow = c(1, 2))
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1),
type = "b")
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
pve
par(mfrow = c(1, 2))
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1),
type = "b")
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1),
type = "b")
pr.out$rotation = -pr.out$rotation
pr.out$x = -pr.out$x
biplot(pr.out, scale = 0)
